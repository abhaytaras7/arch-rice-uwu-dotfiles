{"ref":"547be552-4012-44ab-a3ed-e83f4411e959","syncData":{"version":1,"machineId":"2f5d7c63-f1aa-43f9-9bd3-144f4276e2dd","content":"{\"c.json\":\" \\n{\\n\\t\\\"THE MAIN CODE\\\": {\\n\\t\\t\\\"prefix\\\": \\\"ccode\\\",\\n\\t\\t\\\"body\\\":[\\n\\t\\t\\t\\\"#include <stdio.h>\\\",\\n\\t\\t\\t\\\"#include <stdlib.h>\\\",\\n\\t\\t\\t\\\"#include <assert.h>\\\",\\n\\t\\t\\t \\n\\t\\t\\t\\\"\\\\t\\\\n\\\",\\n\\t\\t\\t\\\"int main(int argc, char **argv){\\\",\\n\\t\\t\\t\\\"$0\\\",\\n\\n\\t\\t\\t\\\"return 0;\\\",\\n\\t\\t\\\"}\\\"\\n\\t\\t]\\n\\n\\t},\\n\\t\\\"printf\\\":{\\n\\t\\t\\\"prefix\\\": \\\"printf\\\",\\n\\t\\t\\\"body\\\": \\\"printf($1);\\\"\\n\\t},\\n\\t\\n\\t\\\"for\\\": {\\n\\t\\t\\\"prefix\\\": \\\"for\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"for (${size_t} ${i} = ${1:0}; ${i} < ${2:length}; ${i}++)\\\",\\n\\t\\t\\t\\\"{\\\",\\n\\t\\t\\t\\\"$3\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Code snippet for 'for' loop\\\"\\n\\t},\\n\\t\\\"forr\\\": {\\n\\t\\t\\\"prefix\\\": \\\"forr\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"for (int ${i} = ${1:length} - 1; ${i} >= ${2:0}; ${i}--)\\\",\\n\\t\\t\\t\\\"{\\\",\\n\\t\\t\\t\\\"$3\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Code snippet for reverse 'for' loop\\\"\\n\\t},\\n\\t\\\"while\\\": {\\n\\t\\t\\\"prefix\\\": \\\"while\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"while ($1)\\\",\\n\\t\\t\\t\\\"{\\\",\\n\\t\\t\\t\\\"$2\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"\\\"\\n\\t},\\n\\t\\\"if\\\": {\\n\\t\\t\\\"prefix\\\": \\\"if\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"if ($1)\\\",\\n\\t\\t\\t\\\"{\\\",\\n\\t\\t\\t\\\"$2\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Code snippet for if statement\\\"\\n\\t},\\n\\t\\\"else\\\": {\\n\\t\\t\\\"prefix\\\": \\\"else\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"else\\\",\\n\\t\\t\\t\\\"{\\\",\\n\\t\\t\\t\\\"$1\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Code snippet for else statement\\\"\\n\\t},\\n\\t\\\"else if\\\": {\\n\\t\\t\\\"prefix\\\": \\\"else if\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"else if ($1)\\\",\\n\\t\\t\\t\\\"{\\\",\\n\\t\\t\\t\\\"$2\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Code snippet for else-if statement\\\"\\n\\t},\\n\\t\\\"enum\\\": {\\n\\t\\t\\\"prefix\\\": \\\"enum\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"enum ${MyEnum}\\\",\\n\\t\\t\\t\\\"{\\\",\\n\\t\\t\\t\\\"$1\\\",\\n\\t\\t\\t\\\"};\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Code snippet for enum\\\"\\n\\t},\\n\\t\\\"#ifdef\\\": {\\n\\t\\t\\\"prefix\\\": \\\"#ifdef\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"#ifdef ${DEBUG}\\\",\\n\\t\\t\\t\\\"$1\\\",\\n\\t\\t\\t\\\"#endif // ${DEBUG}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Code snippet for #ifdef\\\"\\n\\t},\\n\\t\\\"#ifndef\\\": {\\n\\t\\t\\\"prefix\\\": \\\"#ifndef\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"#ifndef ${1:1}\\\",\\n\\t\\t\\t\\\"$2\\\",\\n\\t\\t\\t\\\"#endif // !$1\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Code snippet for #ifndef\\\"\\n\\t},\\n\\t\\\"#if\\\": {\\n\\t\\t\\\"prefix\\\": \\\"#if\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"#ifdef ${1:0}\\\",\\n\\t\\t\\t\\\"$2\\\",\\n\\t\\t\\t\\\"#endif // $1\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Code snippet for #if\\\"\\n\\t},\\n\\t\\\"struct\\\": {\\n\\t\\t\\\"prefix\\\": \\\"struct\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"typedef struct ${MyStruct}\\\",\\n\\t\\t\\t\\\"{\\\",\\n\\t\\t\\t\\\"$1\\\",\\n\\t\\t\\t\\\"};\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Code snippet for struct\\\"\\n\\t},\\n\\t\\\"switch\\\": {\\n\\t\\t\\\"prefix\\\": \\\"switch\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"switch (${switch_on})\\\",\\n\\t\\t\\t\\\"{\\\",\\n\\t\\t\\t\\\"default:\\\",\\n\\t\\t\\t\\\"break;\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Code snippet for switch statement\\\"\\n\\t},\\n\\t\\\"union\\\": {\\n\\t\\t\\\"prefix\\\": \\\"union\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"union ${MyUnion}\\\",\\n\\t\\t\\t\\\"{\\\",\\n\\t\\t\\t\\\"$1\\\",\\n\\t\\t\\t\\\"};\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Code snippet for union\\\"\\n\\t},\\n\\t\\\"#inc\\\": {\\n\\t\\t\\\"prefix\\\": \\\"#inc\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"#include \\\\\\\"$1\\\\\\\"\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Code snippet for #include \\\\\\\" \\\\\\\"\\\"\\n\\t},\\n\\t\\\"#inc<\\\": {\\n\\t\\t\\\"prefix\\\": \\\"#inc<\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"#include <$1>\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Code snippet for #include \\\\\\\" \\\\\\\"\\\"\\n\\t},\\n\\t\\\"#def\\\": {\\n\\t\\t\\\"prefix\\\": \\\"#def\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"#define \\\\\\\"$1\\\\\\\" \\\\\\\"$2\\\\\\\" \\\"\\n\\t\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Code snippet for #define \\\\\\\" \\\\\\\"\\\"\\n\\t}\\n\\n\\t\\n\\n\\t\\n}\\n\",\"cpp.json\":\"{\\n\\n\\t\\\"Lambda Fucntion\\\":{\\n\\t\\t\\\"prefix\\\": \\\"lamb\\\",\\n\\t\\t\\\"body\\\": \\\"[${1:label}](${2:label}){${3:label}}\\\"\\n\\n\\t},\\n\\n\\t\\\"THE STARTING CODE\\\":{\\n\\t\\t\\\"prefix\\\": \\\"cpp\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"#include<iostream>\\\",\\\" \\\",\\n \\t\\t\\\"int main(int argc, char** argv) {\\\",\\n\\n\\t\\t\\t\\\"$0\\\",\\n\\t\\t\\t\\n\\n\\t\\t\\t\\\"return 0;\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t]\\n\\t},\\n\\t\\\"for\\\": {\\n\\t\\t\\\"prefix\\\": \\\"for\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"for (${size_t} ${i} = ${1:0}; ${i} < ${2:length}; ${i}++)\\\",\\n\\t\\t\\t\\\"{\\\",\\n\\t\\t\\t\\\"$3\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Code snippet for 'for' loop\\\"\\n\\t},\\n\\t\\\"forr\\\": {\\n\\t\\t\\\"prefix\\\": \\\"forr\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"for (int ${i} = ${1:length} - 1; ${i} >= ${2:0}; ${i}--)\\\",\\n\\t\\t\\t\\\"{\\\",\\n\\t\\t\\t\\\"$3\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Code snippet for reverse 'for' loop\\\"\\n\\t},\\n\\t\\\"do\\\": {\\n\\t\\t\\\"prefix\\\": \\\"do\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"do\\\",\\n\\t\\t\\t\\\"{\\\",\\n\\t\\t\\t\\\"$1\\\",\\n\\t\\t\\t\\\"} while($2);\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Code snippet for do...while loop\\\"\\n\\t},\\n\\t\\\"while\\\": {\\n\\t\\t\\\"prefix\\\": \\\"while\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"while ($1)\\\",\\n\\t\\t\\t\\\"{\\\",\\n\\t\\t\\t\\\"$2\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Code snippet for while loop\\\"\\n\\t},\\n\\t\\\"foreach\\\": {\\n\\t\\t\\\"prefix\\\": \\\"foreach\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"for(auto ${var} : ${collection_to_loop})\\\",\\n\\t\\t\\t\\\"{\\\",\\n\\t\\t\\t\\\"$1\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Code snippet for range-based for loop (c++11) statement\\\"\\n\\t},\\n\\t\\\"if\\\": {\\n\\t\\t\\\"prefix\\\": \\\"if\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"if ($1)\\\",\\n\\t\\t\\t\\\"{\\\",\\n\\t\\t\\t\\\"$2\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Code snippet for if statement\\\"\\n\\t},\\n\\t\\\"else\\\": {\\n\\t\\t\\\"prefix\\\": \\\"else\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"else\\\",\\n\\t\\t\\t\\\"{\\\",\\n\\t\\t\\t\\\"$1\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Code snippet for else statement\\\"\\n\\t},\\n\\t\\\"else if\\\": {\\n\\t\\t\\\"prefix\\\": \\\"else if\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"else if ($1)\\\",\\n\\t\\t\\t\\\"{\\\",\\n\\t\\t\\t\\\"$2\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Code snippet for else-if statement\\\"\\n\\t},\\n\\t\\\"enum\\\": {\\n\\t\\t\\\"prefix\\\": \\\"enum\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"enum ${MyEnum}\\\",\\n\\t\\t\\t\\\"{\\\",\\n\\t\\t\\t\\\"$1\\\",\\n\\t\\t\\t\\\"};\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Code snippet for enum\\\"\\n\\t},\\n\\t\\\"enum class\\\": {\\n\\t\\t\\\"prefix\\\": \\\"enum class\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"enum class ${MyClass} { };\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Code snippet for enum class (c++11)\\\"\\n\\t},\\n\\t\\\"class\\\": {\\n\\t\\t\\\"prefix\\\": \\\"class\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"class ${MyClass}{\\\",\\n\\t\\t\\t\\\"public:\\\",\\n\\t\\t\\t\\\"\\t${MyClass}();\\\",\\n\\t\\t\\t\\\"\\t${MyClass}(${MyClass} &&) = default;\\\",\\n\\t\\t\\t\\\"\\t${MyClass}(const ${MyClass} &) = default;\\\",\\n\\t\\t\\t\\\"\\t${MyClass} &operator=(${MyClass} &&) = default;\\\",\\n\\t\\t\\t\\\"\\t${MyClass} &operator=(const ${MyClass} &) = default;\\\",\\n\\t\\t\\t\\\"\\t~${MyClass}();\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"private:\\\",\\n\\t\\t\\t\\\"\\t$1\\\",\\n\\t\\t\\t\\\"};\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"${MyClass}::${MyClass}()\\\",\\n\\t\\t\\t\\\"{\\\",\\n\\t\\t\\t\\\"}\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"${MyClass}::~${MyClass}()\\\",\\n\\t\\t\\t\\\"{\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Code snippet for class\\\"\\n\\t},\\n\\t\\\"classi\\\": {\\n\\t\\t\\\"prefix\\\": \\\"classi\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"class ${MyClass}\\\",\\n\\t\\t\\t\\\"{\\\",\\n\\t\\t\\t\\\"public:\\\",\\n\\t\\t\\t\\\"\\t${MyClass}() = default;\\\",\\n\\t\\t\\t\\\"\\t${MyClass}(${MyClass} &&) = default;\\\",\\n\\t\\t\\t\\\"\\t${MyClass}(const ${MyClass} &) = default;\\\",\\n\\t\\t\\t\\\"\\t${MyClass} &operator=(${MyClass} &&) = default;\\\",\\n\\t\\t\\t\\\"\\t${MyClass} &operator=(const ${MyClass} &) = default;\\\",\\n\\t\\t\\t\\\"\\t~${MyClass}() = default;\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"private:\\\",\\n\\t\\t\\t\\\"\\t$1\\\",\\n\\t\\t\\t\\\"};\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Code snippet for class with inline constructor/destructor\\\"\\n\\t},\\n\\t\\\"interface\\\": {\\n\\t\\t\\\"prefix\\\": \\\"interface\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"__interface I${Interface}\\\",\\n\\t\\t\\t\\\"{\\\",\\n\\t\\t\\t\\\"\\t$1\\\",\\n\\t\\t\\t\\\"};\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Code snippet for interface (Visual C++)\\\"\\n\\t},\\n\\t\\\"namespace\\\": {\\n\\t\\t\\\"prefix\\\": \\\"namespace\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"namespace ${MyNamespace}\\\",\\n\\t\\t\\t\\\"{\\\",\\n\\t\\t\\t\\\"\\t$1\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Code snippet for namespace\\\"\\n\\t},\\n\\t\\\"#ifdef\\\": {\\n\\t\\t\\\"prefix\\\": \\\"#ifdef\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"#ifdef ${DEBUG}\\\",\\n\\t\\t\\t\\\"$1\\\",\\n\\t\\t\\t\\\"#endif // ${DEBUG}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Code snippet for #ifdef\\\"\\n\\t},\\n\\t\\\"#ifndef\\\": {\\n\\t\\t\\\"prefix\\\": \\\"#ifndef\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"#ifndef ${1:1}\\\",\\n\\t\\t\\t\\\"$2\\\",\\n\\t\\t\\t\\\"#endif // !$1\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Code snippet for #ifndef\\\"\\n\\t},\\n\\t\\\"#if\\\": {\\n\\t\\t\\\"prefix\\\": \\\"#if\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"#ifdef ${1:0}\\\",\\n\\t\\t\\t\\\"$2\\\",\\n\\t\\t\\t\\\"#endif // $1\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Code snippet for #if\\\"\\n\\t},\\n\\t\\\"struct\\\": {\\n\\t\\t\\\"prefix\\\": \\\"struct\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"struct ${MyStruct}\\\",\\n\\t\\t\\t\\\"{\\\",\\n\\t\\t\\t\\\"\\t$1\\\",\\n\\t\\t\\t\\\"};\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Code snippet for struct\\\"\\n\\t},\\n\\t\\\"switch\\\": {\\n\\t\\t\\\"prefix\\\": \\\"switch\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"switch (${switch_on})\\\",\\n\\t\\t\\t\\\"{\\\",\\n\\t\\t\\t\\\"default:\\\",\\n\\t\\t\\t\\\"\\tbreak;$1\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Code snippet for switch statement\\\"\\n\\t},\\n\\t\\\"try\\\": {\\n\\t\\t\\\"prefix\\\": \\\"try\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"try\\\",\\n\\t\\t\\t\\\"{\\\",\\n\\t\\t\\t\\\"\\t\\\",\\n\\t\\t\\t\\\"}\\\",\\n\\t\\t\\t\\\"catch (const std::exception&)\\\",\\n\\t\\t\\t\\\"{\\\",\\n\\t\\t\\t\\\"\\t$1\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Code snippet for try catch\\\"\\n\\t},\\n\\t\\\"union\\\": {\\n\\t\\t\\\"prefix\\\": \\\"union\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"union ${MyUnion}\\\",\\n\\t\\t\\t\\\"{\\\",\\n\\t\\t\\t\\\"\\t$1\\\",\\n\\t\\t\\t\\\"};\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Code snippet for union\\\"\\n\\t},\\n\\t\\\"cout\\\": {\\n\\t\\t\\\"prefix\\\": \\\"cout\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"std::cout << \\\\\\\"${1:/* message */}\\\\\\\" << std::endl;\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Code snippet for printing to std::cout, provided the header is set\\\"\\n\\t},\\n\\t\\\"#inc\\\": {\\n\\t\\t\\\"prefix\\\": \\\"#inc\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"#include \\\\\\\"$1\\\\\\\"\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Code snippet for #include \\\\\\\" \\\\\\\"\\\"\\n\\t},\\n\\t\\\"#inc<\\\": {\\n\\t\\t\\\"prefix\\\": \\\"#inc<\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"#include <$1>\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Code snippet for #include \\\\\\\" \\\\\\\"\\\"\\n\\t},\\n\\t\\\"#def\\\": {\\n\\t\\t\\\"prefix\\\": \\\"#def\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"#define \\\\\\\"$1\\\\\\\" \\\\\\\"$2\\\\\\\" \\\"\\n\\t\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Code snippet for #define \\\\\\\" \\\\\\\"\\\"\\n\\t},\\n\\t\\\"main\\\": {\\n\\t\\t\\\"prefix\\\": \\\"main\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"int main(int argc, const char** argv) {\\\",\\n\\t\\t\\t\\\"    return 0;\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Code snippet for main function\\\"\\n\\t}\\n}\",\"java.json\":\"{\\n\\t\\\"class\\\": {\\n\\t\\t\\\"prefix\\\": [\\n\\t\\t\\t\\\"c\\\",\\n\\t\\t\\t\\\"class\\\"\\n\\t\\t],\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"public class ${1:$TM_FILENAME_BASE} {\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\t$0\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"A class\\\"\\n\\t},\\n\\t\\\"Static class\\\": {\\n\\t\\t\\\"prefix\\\": [\\n\\t\\t\\t\\\"sc\\\",\\n\\t\\t\\t\\\"class\\\",\\n\\t\\t\\t\\\"sclass\\\"\\n\\t\\t],\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"public static class ${1:$TM_FILENAME_BASE} {\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\t$0\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"A static class\\\"\\n\\t},\\n\\t\\\"Interface\\\": {\\n\\t\\t\\\"prefix\\\": [\\n\\t\\t\\t\\\"i\\\",\\n\\t\\t\\t\\\"interface\\\"\\n\\t\\t],\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"public interface ${1:$TM_FILENAME_BASE} {\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\t$0\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"An interface\\\"\\n\\t},\\n\\t\\\"Functional interface\\\": {\\n\\t\\t\\\"prefix\\\": [\\n\\t\\t\\t\\\"fi\\\",\\n\\t\\t\\t\\\"finterface\\\",\\n\\t\\t\\t\\\"interface\\\"\\n\\t\\t],\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"@FunctionalInterface\\\",\\n\\t\\t\\t\\\"public interface ${1:$TM_FILENAME_BASE} {\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\t$0\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"An interface\\\"\\n\\t},\\n\\t\\\"Enum\\\": {\\n\\t\\t\\\"prefix\\\": [\\n\\t\\t\\t\\\"e\\\",\\n\\t\\t\\t\\\"enum\\\"\\n\\t\\t],\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"public enum ${1:$TM_FILENAME_BASE} {\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\t$0\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"An enum\\\"\\n\\t},\\n\\t\\\"Annotation\\\": {\\n\\t\\t\\\"prefix\\\": [\\n\\t\\t\\t\\\"a\\\",\\n\\t\\t\\t\\\"annotation\\\"\\n\\t\\t],\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"import static java.lang.annotation.ElementType.ANNOTATION_TYPE;\\\",\\n\\t\\t\\t\\\"import static java.lang.annotation.ElementType.FIELD;\\\",\\n\\t\\t\\t\\\"import static java.lang.annotation.ElementType.METHOD;\\\",\\n\\t\\t\\t\\\"import static java.lang.annotation.ElementType.PARAMETER;\\\",\\n\\t\\t\\t\\\"import static java.lang.annotation.ElementType.TYPE;\\\",\\n\\t\\t\\t\\\"import static java.lang.annotation.RetentionPolicy.RUNTIME;\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"import java.lang.annotation.Documented;\\\",\\n\\t\\t\\t\\\"import java.lang.annotation.Repeatable;\\\",\\n\\t\\t\\t\\\"import java.lang.annotation.Retention;\\\",\\n\\t\\t\\t\\\"import java.lang.annotation.Target;\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"@Documented\\\",\\n\\t\\t\\t\\\"@Retention(RUNTIME)\\\",\\n\\t\\t\\t\\\"@Target({FIELD, METHOD, PARAMETER, ANNOTATION_TYPE, TYPE})\\\",\\n\\t\\t\\t\\\"public @interface ${1:$TM_FILENAME_BASE} {\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\t$0\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"An annotation\\\"\\n\\t},\\n\\t\\\"Repetable annotation\\\": {\\n\\t\\t\\\"prefix\\\": [\\n\\t\\t\\t\\\"ra\\\",\\n\\t\\t\\t\\\"annotation\\\",\\n\\t\\t\\t\\\"rannotation\\\"\\n\\t\\t],\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"import static java.lang.annotation.ElementType.ANNOTATION_TYPE;\\\",\\n\\t\\t\\t\\\"import static java.lang.annotation.ElementType.FIELD;\\\",\\n\\t\\t\\t\\\"import static java.lang.annotation.ElementType.METHOD;\\\",\\n\\t\\t\\t\\\"import static java.lang.annotation.ElementType.PARAMETER;\\\",\\n\\t\\t\\t\\\"import static java.lang.annotation.ElementType.TYPE;\\\",\\n\\t\\t\\t\\\"import static java.lang.annotation.RetentionPolicy.RUNTIME;\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"import java.lang.annotation.Documented;\\\",\\n\\t\\t\\t\\\"import java.lang.annotation.Repeatable;\\\",\\n\\t\\t\\t\\\"import java.lang.annotation.Retention;\\\",\\n\\t\\t\\t\\\"import java.lang.annotation.Target;\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"@Documented\\\",\\n\\t\\t\\t\\\"@Retention(RUNTIME)\\\",\\n\\t\\t\\t\\\"@Repeatable(${1:$TM_FILENAME_BASE}List.class)\\\",\\n\\t\\t\\t\\\"@Target({FIELD, METHOD, PARAMETER, ANNOTATION_TYPE, TYPE})\\\",\\n\\t\\t\\t\\\"public @interface $1 {\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\t$0\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\t@Documented\\\",\\n\\t\\t\\t\\\"\\\\t@Retention(RUNTIME)\\\",\\n\\t\\t\\t\\\"\\\\t@Target({FIELD, METHOD, PARAMETER, ANNOTATION_TYPE, TYPE})\\\",\\n\\t\\t\\t\\\"\\\\tpublic @interface List {\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t$1[] value();\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\\\t}\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"A repetable annotation\\\"\\n\\t},\\n\\t\\\"Type\\\": {\\n\\t\\t\\\"prefix\\\": [\\n\\t\\t\\t\\\"t\\\",\\n\\t\\t\\t\\\"type\\\"\\n\\t\\t],\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"${1|Void,String,int,Integer,long,Long,float,Float,double,Double,boolean,Boolean,short,Short,byte,Byte,char,Character,BigDecimal,StringBuilder,LocalDate,LocalDateTime,ZonedDateTime,LocalTime,Instant,YearMonth,Month,Year,MonthDay,DayOfWeek,Period,Duration,Date,Class<?>,Object,Object[],Consumer<>,BiConsumer<>,Predicate<>,BiPredicate<>,Function<>,BiFunction<>,Supplier<>,Optional<>,List<>,Set<>,Map<>,Collection<>,Stream<>|}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"A type\\\"\\n\\t}\\n}\",\"csharp.json\":\"{\\n\\t// Place your snippets for csharp here. Each snippet is defined under a snippet name and has a prefix, body and \\n\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the \\n\\t// same ids are connected.\\n\\t// Example:\\n\\t// \\\"Print to console\\\": {\\n\\t// \\t\\\"prefix\\\": \\\"log\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"console.log('$1');\\\",\\n\\t// \\t\\t\\\"$2\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t// }\\n}\"}"}}